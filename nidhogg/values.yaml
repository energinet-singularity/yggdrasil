nidhogg:
  # A reference to this repo itself.
  yggdrasil:
    repoURL: "https://github.com/distributed-technologies/yggdrasil.git"
    targetRevision: "jesper_aks_dev"

    # ingress:
      # Set either a subdomain or a path here
      # domain: <your-ingress-domain-here>
      # loadBalancerIP: 0.0.0.0
      # This value should be set if you want to deploy to an AKS cluster and want to use their ingress
      # loadbalancerResourceGroup: <your-resource-group-here>

    # Configure the loadbalancer if you plan on using the loadbalancer included in SCCP
    # loadbalancer:
      # ipRangeStart: 0.0.0.0
      # ipRangeStop: 0.0.0.0

  # Whether to install the container network interface on the cluster. Should be false when using a managed Kubernetes solution (ex: Azure's AKS)
  installCNI: false
  # Whether to enable the circular reference to allow nidhogg to monitor itself
  monitorNidhogg: true
  # Enable the "enableCephAKS" to enable Ceph on AKS cluster. You can edit the number of OSDs in the values file for Ceph found in yggdrasil/services/rook-ceph/ceph/values.yaml
  enableCephAKS: true

  argo-cd-proxy-chart:
    argo-cd:
      controller:
        replicas: 3
        env:
          - name: "ARGOCD_CONTROLLER_REPLICAS"
            value: "3"
        enableStatefulSet: true
      redis-ha:
        enabled: true
        replicas: 3
        haproxy:
          replicas: 3
      redis:
        enabled: false
      server:
        replicas: 3
        config:
          resource.customizations: |
            admissionregistration.k8s.io/MutatingWebhookConfiguration:
              ignoreDifferences: |
                jsonPointers:
                - /webhooks/0/clientConfig/caBundle
            admissionregistration.k8s.io/ValidatingWebhookConfiguration:
              ignoreDifferences: |
                jsonPointers:
                - /webhooks/0/clientConfig/caBundle
                - /webhooks/0/namespaceSelector/matchExpressions/2
            extensions/Ingress:
              health.lua: |
                hs = {}
                hs.status = "Healthy"
                return hs
            networking.k8s.io/Ingress:
              health.lua: |
                hs = {}
                hs.status = "Healthy"
                return hs
        service:
          type: LoadBalancer
